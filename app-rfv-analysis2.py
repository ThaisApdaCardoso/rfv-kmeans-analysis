# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aCq6c7y9l7uJJZIYpIZGAMv3WpupZIuI
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

def load_data(file):
    try:
        return pd.read_csv(file, sep=None, engine='python', infer_datetime_format=True, parse_dates=['DiaCompra'])
    except:
        return pd.read_excel(file)

def main():
    st.set_page_config(page_title='Análise RFV', layout='wide')
    st.title('Análise RFV com Clusterização')
    st.markdown('---')

    st.sidebar.write("## Upload de Arquivo")
    data_file = st.sidebar.file_uploader("Selecione um arquivo CSV", type=['csv'])

    if data_file is not None:
        df_compras = load_data(data_file)
        st.write("## Dados Carregados")
        st.write(df_compras.head())

        # Exibir nomes das colunas para depuração
        st.write("Colunas do arquivo carregado:", df_compras.columns.tolist())

        dia_atual = datetime(2021, 12, 9)

        # Cálculo da Recência
        df_recencia = df_compras.groupby(by='ID_cliente', as_index=False)['DiaCompra'].max()
        df_recencia.columns = ['ID_cliente', 'DiaUltimaCompra']
        df_recencia['Recencia'] = df_recencia['DiaUltimaCompra'].apply(lambda x: (dia_atual - x).days)
        df_recencia.drop('DiaUltimaCompra', axis=1, inplace=True)

        # Cálculo da Frequência
        df_frequencia = df_compras.groupby(by='ID_cliente', as_index=False)['CodigoCompra'].nunique()
        df_frequencia.columns = ['ID_cliente', 'Frequencia']

        # Cálculo do Valor Monetário (se a coluna existir)
        if 'ValorTotal' in df_compras.columns:
            df_monetario = df_compras.groupby(by='ID_cliente', as_index=False)['ValorTotal'].sum()
            df_monetario.columns = ['ID_cliente', 'ValorMonetario']
        else:
            st.error("Erro: A coluna 'ValorTotal' não foi encontrada no arquivo. Verifique o nome correto.")
            return

        # Unindo os três DataFrames para formar a tabela RFV
        df_rfv = df_recencia.merge(df_frequencia, on='ID_cliente').merge(df_monetario, on='ID_cliente')

        # Clusterização com K-Means
        num_clusters = st.sidebar.slider("Número de clusters", min_value=2, max_value=10, value=4)
        kmeans = KMeans(n_clusters=num_clusters, random_state=42)
        df_rfv['Cluster'] = kmeans.fit_predict(df_rfv[['Recencia', 'Frequencia', 'ValorMonetario']])

        st.write("## Métricas RFV com Clusters")
        st.write(df_rfv.head())

        # Gráficos de distribuição dos clusters
        st.write("## Distribuição dos Clusters")
        fig, ax = plt.subplots(1, 2, figsize=(12, 5))
        sns.scatterplot(x=df_rfv['Recencia'], y=df_rfv['Frequencia'], hue=df_rfv['Cluster'], palette='viridis', ax=ax[0])
        ax[0].set_title("Recência vs Frequência")
        sns.scatterplot(x=df_rfv['Frequencia'], y=df_rfv['ValorMonetario'], hue=df_rfv['Cluster'], palette='viridis', ax=ax[1])
        ax[1].set_title("Frequência vs Valor Monetário")
        st.pyplot(fig)

if __name__ == "__main__":
    main()